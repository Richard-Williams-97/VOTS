{"ast":null,"code":"/**\n * File Scanner Service\n * Scans a folder and retrieves information about all .txt files\n */class FileScannerService{/**\n   * Scans a folder and returns information about all .txt files\n   * @param {string} folderPath - The path to the folder to scan\n   * @returns {Promise<Object>} JSON object containing file information\n   */static async scanTextFiles(folderPath){try{// Validate folder path\nif(!folderPath||typeof folderPath!=='string'){throw new Error('Invalid folder path provided');}// Ensure folder path ends with slash\nconst normalizedPath=folderPath.endsWith('/')?folderPath:folderPath+'/';// Get text files from the folder\nconst files=await FileScannerService.getTextFilesFromFolder(normalizedPath);return{success:true,data:{folderPath:normalizedPath,totalFiles:files.length,files:files,scanTimestamp:new Date().toISOString()},metadata:{scanMethod:'folder-scan',environment:'browser'}};}catch(error){return{success:false,error:{message:error.message,type:error.name,timestamp:new Date().toISOString()},data:null};}}/**\n   * Gets text files from a folder using a predefined list or server endpoint\n   * @param {string} folderPath - The folder path\n   * @returns {Promise<Array>} Array of file information objects\n   */static async getTextFilesFromFolder(folderPath){// For browser environments, we'll use a predefined list or fetch from a manifest\nconst knownTextFiles=[{path:`${folderPath}example.txt`,title:'Example Text File',info:'Sample text file for testing the TextFileReaderService'}];// Try to get additional files from a manifest\ntry{const manifestResponse=await fetch(`${folderPath}file-manifest.json`);if(manifestResponse.ok){var _manifest$textFiles,_manifest$textFiles2;const manifest=await manifestResponse.json();console.log('üìÅ Loaded manifest with',((_manifest$textFiles=manifest.textFiles)===null||_manifest$textFiles===void 0?void 0:_manifest$textFiles.length)||0,'files');// Filter out non-story files (README, documentation, etc.)\nconst storyFiles=((_manifest$textFiles2=manifest.textFiles)===null||_manifest$textFiles2===void 0?void 0:_manifest$textFiles2.filter(file=>{const fileName=file.path.toLowerCase();// Only exclude files that are clearly documentation/README\nreturn!fileName.includes('readme')&&!fileName.includes('manifest')&&!fileName.includes('license')&&!fileName.includes('changelog')&&!fileName.includes('contributing')&&file.path.toLowerCase().endsWith('.txt');}))||[];return storyFiles.length>0?storyFiles:knownTextFiles;}}catch(error){console.warn('‚ö†Ô∏è Could not fetch file manifest, using default list');}return knownTextFiles;}/**\n   * Gets detailed information about a specific text file\n   * @param {string} filePath - Path to the text file\n   * @returns {Promise<Object>} Detailed file information\n   */static async getFileInfo(filePath){try{if(!filePath||typeof filePath!=='string'){throw new Error('Invalid file path provided');}if(!filePath.toLowerCase().endsWith('.txt')){throw new Error('File must have .txt extension');}// Get file content for analysis\nconst contentResponse=await fetch(filePath);if(!contentResponse.ok){throw new Error(`Failed to access file: ${contentResponse.status} ${contentResponse.statusText}`);}const content=await contentResponse.text();// Extract title from first line or filename\nconst lines=content.split('\\n');const firstLine=lines[0].trim();const fileName=filePath.split('/').pop().replace('.txt','');// Try to extract title from first line if it looks like a title\nconst title=FileScannerService.extractTitle(firstLine,fileName);// Generate info from content analysis\nconst info=FileScannerService.generateFileInfo(content,fileName);return{success:true,data:{path:filePath,title:title,info:info,fileName:fileName,fileSize:content.length,lineCount:lines.length,wordCount:content.trim().split(/\\s+/).filter(word=>word.length>0).length,characterCount:content.length,firstLine:firstLine,content:content,timestamp:new Date().toISOString()}};}catch(error){return{success:false,error:{message:error.message,type:error.name,timestamp:new Date().toISOString()},data:null};}}/**\n   * Extracts a title from the first line or filename\n   * @param {string} firstLine - First line of the file\n   * @param {string} fileName - Name of the file without extension\n   * @returns {string} Extracted title\n   */static extractTitle(firstLine,fileName){// If first line looks like a title (not too long, starts with capital, no special chars)\nif(firstLine&&firstLine.length<100&&firstLine.length>0&&/^[A-Z]/.test(firstLine)&&!firstLine.includes('http')&&!firstLine.includes('www')){return firstLine;}// Otherwise use filename converted to title case\nreturn fileName.split(/[-_\\s]+/).map(word=>word.charAt(0).toUpperCase()+word.slice(1).toLowerCase()).join(' ');}/**\n   * Generates file information based on content analysis\n   * @param {string} content - File content\n   * @param {string} fileName - File name\n   * @returns {string} Generated file information\n   */static generateFileInfo(content,fileName){const lines=content.split('\\n');const words=content.trim().split(/\\s+/).filter(word=>word.length>0);let info='';if(lines.length<=1){info='Single line text file';}else if(lines.length<=10){info=`Short story with ${lines.length} lines`;}else if(lines.length<=50){info=`Medium story with ${lines.length} lines`;}else{info=`Long story with ${lines.length} lines`;}info+=` (${words.length} words)`;// Add content type hints\nif(content.includes('http')||content.includes('www')){info+=' - Contains links';}if(content.includes('@')){info+=' - Contains email addresses';}if(content.match(/\\d{4}-\\d{2}-\\d{2}/)){info+=' - Contains dates';}return info;}}// Export the service\nexport default FileScannerService;// Also export individual methods for convenience\nexport const{scanTextFiles,getFileInfo}=FileScannerService;","map":{"version":3,"names":["FileScannerService","scanTextFiles","folderPath","Error","normalizedPath","endsWith","files","getTextFilesFromFolder","success","data","totalFiles","length","scanTimestamp","Date","toISOString","metadata","scanMethod","environment","error","message","type","name","timestamp","knownTextFiles","path","title","info","manifestResponse","fetch","ok","_manifest$textFiles","_manifest$textFiles2","manifest","json","console","log","textFiles","storyFiles","filter","file","fileName","toLowerCase","includes","warn","getFileInfo","filePath","contentResponse","status","statusText","content","text","lines","split","firstLine","trim","pop","replace","extractTitle","generateFileInfo","fileSize","lineCount","wordCount","word","characterCount","test","map","charAt","toUpperCase","slice","join","words","match"],"sources":["/Users/verseofthesun/Web/verseofthesun/VOTS/src/StoryTxt/StoryService/FileScannerService.js"],"sourcesContent":["/**\n * File Scanner Service\n * Scans a folder and retrieves information about all .txt files\n */\n\nclass FileScannerService {\n  /**\n   * Scans a folder and returns information about all .txt files\n   * @param {string} folderPath - The path to the folder to scan\n   * @returns {Promise<Object>} JSON object containing file information\n   */\n  static async scanTextFiles(folderPath) {\n    try {\n      // Validate folder path\n      if (!folderPath || typeof folderPath !== 'string') {\n        throw new Error('Invalid folder path provided');\n      }\n\n      // Ensure folder path ends with slash\n      const normalizedPath = folderPath.endsWith('/') ? folderPath : folderPath + '/';\n\n      // Get text files from the folder\n      const files = await FileScannerService.getTextFilesFromFolder(normalizedPath);\n\n      return {\n        success: true,\n        data: {\n          folderPath: normalizedPath,\n          totalFiles: files.length,\n          files: files,\n          scanTimestamp: new Date().toISOString()\n        },\n        metadata: {\n          scanMethod: 'folder-scan',\n          environment: 'browser'\n        }\n      };\n\n    } catch (error) {\n      return {\n        success: false,\n        error: {\n          message: error.message,\n          type: error.name,\n          timestamp: new Date().toISOString()\n        },\n        data: null\n      };\n    }\n  }\n\n  /**\n   * Gets text files from a folder using a predefined list or server endpoint\n   * @param {string} folderPath - The folder path\n   * @returns {Promise<Array>} Array of file information objects\n   */\n  static async getTextFilesFromFolder(folderPath) {\n    // For browser environments, we'll use a predefined list or fetch from a manifest\n    const knownTextFiles = [\n      {\n        path: `${folderPath}example.txt`,\n        title: 'Example Text File',\n        info: 'Sample text file for testing the TextFileReaderService'\n      }\n    ];\n\n    // Try to get additional files from a manifest\n    try {\n      const manifestResponse = await fetch(`${folderPath}file-manifest.json`);\n      if (manifestResponse.ok) {\n        const manifest = await manifestResponse.json();\n        console.log('üìÅ Loaded manifest with', manifest.textFiles?.length || 0, 'files');\n        \n        // Filter out non-story files (README, documentation, etc.)\n        const storyFiles = manifest.textFiles?.filter(file => {\n          const fileName = file.path.toLowerCase();\n          \n          // Only exclude files that are clearly documentation/README\n          return !fileName.includes('readme') && \n                 !fileName.includes('manifest') &&\n                 !fileName.includes('license') &&\n                 !fileName.includes('changelog') &&\n                 !fileName.includes('contributing') &&\n                 file.path.toLowerCase().endsWith('.txt');\n        }) || [];\n        \n        return storyFiles.length > 0 ? storyFiles : knownTextFiles;\n      }\n    } catch (error) {\n      console.warn('‚ö†Ô∏è Could not fetch file manifest, using default list');\n    }\n\n    return knownTextFiles;\n  }\n\n  /**\n   * Gets detailed information about a specific text file\n   * @param {string} filePath - Path to the text file\n   * @returns {Promise<Object>} Detailed file information\n   */\n  static async getFileInfo(filePath) {\n    try {\n      if (!filePath || typeof filePath !== 'string') {\n        throw new Error('Invalid file path provided');\n      }\n\n      if (!filePath.toLowerCase().endsWith('.txt')) {\n        throw new Error('File must have .txt extension');\n      }\n\n      // Get file content for analysis\n      const contentResponse = await fetch(filePath);\n      if (!contentResponse.ok) {\n        throw new Error(`Failed to access file: ${contentResponse.status} ${contentResponse.statusText}`);\n      }\n      \n      const content = await contentResponse.text();\n\n      // Extract title from first line or filename\n      const lines = content.split('\\n');\n      const firstLine = lines[0].trim();\n      const fileName = filePath.split('/').pop().replace('.txt', '');\n      \n      // Try to extract title from first line if it looks like a title\n      const title = FileScannerService.extractTitle(firstLine, fileName);\n\n      // Generate info from content analysis\n      const info = FileScannerService.generateFileInfo(content, fileName);\n\n      return {\n        success: true,\n        data: {\n          path: filePath,\n          title: title,\n          info: info,\n          fileName: fileName,\n          fileSize: content.length,\n          lineCount: lines.length,\n          wordCount: content.trim().split(/\\s+/).filter(word => word.length > 0).length,\n          characterCount: content.length,\n          firstLine: firstLine,\n          content: content,\n          timestamp: new Date().toISOString()\n        }\n      };\n\n    } catch (error) {\n      return {\n        success: false,\n        error: {\n          message: error.message,\n          type: error.name,\n          timestamp: new Date().toISOString()\n        },\n        data: null\n      };\n    }\n  }\n\n  /**\n   * Extracts a title from the first line or filename\n   * @param {string} firstLine - First line of the file\n   * @param {string} fileName - Name of the file without extension\n   * @returns {string} Extracted title\n   */\n  static extractTitle(firstLine, fileName) {\n    // If first line looks like a title (not too long, starts with capital, no special chars)\n    if (firstLine && \n        firstLine.length < 100 && \n        firstLine.length > 0 &&\n        /^[A-Z]/.test(firstLine) &&\n        !firstLine.includes('http') &&\n        !firstLine.includes('www')) {\n      return firstLine;\n    }\n    \n    // Otherwise use filename converted to title case\n    return fileName\n      .split(/[-_\\s]+/)\n      .map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())\n      .join(' ');\n  }\n\n  /**\n   * Generates file information based on content analysis\n   * @param {string} content - File content\n   * @param {string} fileName - File name\n   * @returns {string} Generated file information\n   */\n  static generateFileInfo(content, fileName) {\n    const lines = content.split('\\n');\n    const words = content.trim().split(/\\s+/).filter(word => word.length > 0);\n    \n    let info = '';\n    \n    if (lines.length <= 1) {\n      info = 'Single line text file';\n    } else if (lines.length <= 10) {\n      info = `Short story with ${lines.length} lines`;\n    } else if (lines.length <= 50) {\n      info = `Medium story with ${lines.length} lines`;\n    } else {\n      info = `Long story with ${lines.length} lines`;\n    }\n    \n    info += ` (${words.length} words)`;\n    \n    // Add content type hints\n    if (content.includes('http') || content.includes('www')) {\n      info += ' - Contains links';\n    }\n    if (content.includes('@')) {\n      info += ' - Contains email addresses';\n    }\n    if (content.match(/\\d{4}-\\d{2}-\\d{2}/)) {\n      info += ' - Contains dates';\n    }\n    \n    return info;\n  }\n}\n\n// Export the service\nexport default FileScannerService;\n\n// Also export individual methods for convenience\nexport const { \n  scanTextFiles, \n  getFileInfo\n} = FileScannerService; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}